services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.prod
    ports:
      - "18000:8000"
    volumes:
      - ./output:/app/output
      - ./tests:/app/tests
    environment:
      - PYTHONPATH=/app
      - BACKEND_HOST=0.0.0.0
      - BACKEND_PORT=8000
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=*
    restart: unless-stopped
    networks:
      - scraper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend.prod
    ports:
      - "180:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - scraper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Ngrok for public access (uncomment if needed)
  ngrok:
    image: ngrok/ngrok:latest
    ports:
      - "14040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: http frontend:80
    depends_on:
      - frontend
    restart: unless-stopped
    networks:
      - scraper-network

  # Optional: Cloudflare Tunnel for public access (uncomment if needed)
  # cloudflared:
  #   image: cloudflare/cloudflared:latest
  #   command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
  #   environment:
  #     - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
  #   restart: unless-stopped
  #   networks:
  #     - scraper-network
  #   depends_on:
  #     - frontend

networks:
  scraper-network:
    driver: bridge

volumes:
  output: 